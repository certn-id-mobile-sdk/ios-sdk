// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DotFaceCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CommonCrypto
import DotCamera
import DotCapture
import DotCore
import DotFaceCommons
@_exported import DotFaceCore
import DotProtocolBuffers
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import iface
@_inheritsConvenienceInitializers @objc(DOTFSmileLivenessStyle) final public class SmileLivenessStyle : ObjectiveC.NSObject {
  public struct Defaults {
    public static let backgroundColor: UIKit.UIColor
    public static let instructionFont: UIKit.UIFont
    public static let instructionTextColor: UIKit.UIColor
    public static let instructionBackgroundColor: UIKit.UIColor
    public static let placeholderColor: UIKit.UIColor
    public static let detectionLayerColor: UIKit.UIColor
    public static let overlayColor: UIKit.UIColor
  }
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let instructionFont: UIKit.UIFont
  @objc final public let instructionTextColor: UIKit.UIColor
  @objc final public let instructionBackgroundColor: UIKit.UIColor
  @objc final public let placeholderColor: UIKit.UIColor
  @objc final public let detectionLayerColor: UIKit.UIColor
  @objc final public let overlayColor: UIKit.UIColor
  @objc public init(backgroundColor: UIKit.UIColor = Defaults.backgroundColor, instructionFont: UIKit.UIFont = Defaults.instructionFont, instructionTextColor: UIKit.UIColor = Defaults.instructionTextColor, instructionBackgroundColor: UIKit.UIColor = Defaults.instructionBackgroundColor, placeholderColor: UIKit.UIColor = Defaults.placeholderColor, detectionLayerColor: UIKit.UIColor = Defaults.detectionLayerColor, overlayColor: UIKit.UIColor = Defaults.overlayColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc(DOTFEyeGazeLivenessState) public enum EyeGazeLivenessState : Swift.Int, Swift.CustomStringConvertible {
  case ok
  case noFace
  case lostFace
  case lowQualityFace
  case faceTooClose
  case faceTooFar
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFValueRange) final public class ValueRange : ObjectiveC.NSObject {
  public enum Error : Foundation.LocalizedError {
    case invalidBounds
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: DotFaceCore.ValueRange.Error, b: DotFaceCore.ValueRange.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc(DOTFValueRangeStatus) public enum Status : Swift.Int {
    case inRange
    case tooLow
    case tooHigh
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let min: Swift.Double
  @objc final public let max: Swift.Double
  @objc public init(min: Swift.Double, max: Swift.Double) throws
  @objc final public func resolveStatus(value: Swift.Double) -> DotFaceCore.ValueRange.Status
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceImage) final public class FaceImage : ObjectiveC.NSObject {
  @objc final public let image: DotCore.BgrRawImage
  @objc final public let minFaceSizePixels: Swift.Int
  @objc final public let maxFaceSizePixels: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceSimpleCaptureDetection) final public class FaceSimpleCaptureDetection : ObjectiveC.NSObject {
  @objc final public let bgrRawImage: DotCore.BgrRawImage
  @objc final public let detectedFace: DotFaceCore.DetectedFace?
  @objc final public let position: DotFaceCommons.DetectionPosition?
  @objc public init(bgrRawImage: DotCore.BgrRawImage, detectedFace: DotFaceCore.DetectedFace?, position: DotFaceCommons.DetectionPosition?)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFFaceImageQualityQuery) final public class FaceImageQualityQuery : ObjectiveC.NSObject {
  @objc final public let sharpness: Swift.Bool
  @objc final public let brightness: Swift.Bool
  @objc final public let contrast: Swift.Bool
  @objc final public let uniqueIntensityLevels: Swift.Bool
  @objc final public let shadow: Swift.Bool
  @objc final public let specularity: Swift.Bool
  @objc final public let backgroundUniformity: Swift.Bool
  @objc override convenience dynamic public init()
  @objc public init(sharpness: Swift.Bool = false, brightness: Swift.Bool = false, contrast: Swift.Bool = false, uniqueIntensityLevels: Swift.Bool = false, shadow: Swift.Bool = false, specularity: Swift.Bool = false, backgroundUniformity: Swift.Bool = false)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFEyesExpressionQuery) final public class EyesExpressionQuery : ObjectiveC.NSObject {
  @objc final public let rightEye: Swift.Bool
  @objc final public let leftEye: Swift.Bool
  @objc override convenience dynamic public init()
  @objc public init(rightEye: Swift.Bool = false, leftEye: Swift.Bool = false)
  @objc deinit
}
@objc(DOTFMagnifEyeLivenessViewControllerDelegate) public protocol MagnifEyeLivenessViewControllerDelegate {
  @objc(magnifEyeLivenessViewController:finished:) func magnifEyeLivenessViewController(_ viewController: DotFaceCore.MagnifEyeLivenessViewController, finished result: DotFaceCore.MagnifEyeLivenessResult)
  @objc(magnifEyeLivenessViewController:processed:) optional func magnifEyeLivenessViewController(_ viewController: DotFaceCore.MagnifEyeLivenessViewController, processed detection: DotFaceCore.FaceAutoCaptureDetection)
  @objc(magnifEyeLivenessViewControllerNoCameraPermission:) optional func magnifEyeLivenessViewControllerNoCameraPermission(_ viewController: DotFaceCore.MagnifEyeLivenessViewController)
  @objc(magnifEyeLivenessViewControllerViewDidLoad:) optional func magnifEyeLivenessViewControllerViewDidLoad(_ viewController: DotFaceCore.MagnifEyeLivenessViewController)
  @objc(magnifEyeLivenessViewControllerViewDidLayoutSubviews:) optional func magnifEyeLivenessViewControllerViewDidLayoutSubviews(_ viewController: DotFaceCore.MagnifEyeLivenessViewController)
  @objc(magnifEyeLivenessViewControllerViewWillAppear:) optional func magnifEyeLivenessViewControllerViewWillAppear(_ viewController: DotFaceCore.MagnifEyeLivenessViewController)
  @objc(magnifEyeLivenessViewControllerViewDidAppear:) optional func magnifEyeLivenessViewControllerViewDidAppear(_ viewController: DotFaceCore.MagnifEyeLivenessViewController)
  @objc(magnifEyeLivenessViewControllerViewWillDisappear:) optional func magnifEyeLivenessViewControllerViewWillDisappear(_ viewController: DotFaceCore.MagnifEyeLivenessViewController)
  @objc(magnifEyeLivenessViewControllerViewDidDisappear:) optional func magnifEyeLivenessViewControllerViewDidDisappear(_ viewController: DotFaceCore.MagnifEyeLivenessViewController)
  @objc(magnifEyeLivenessViewControllerViewWillTransition:) optional func magnifEyeLivenessViewControllerViewWillTransition(_ viewController: DotFaceCore.MagnifEyeLivenessViewController)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFExpression) final public class Expression : ObjectiveC.NSObject {
  @objc final public let eyes: DotFaceCore.EyesExpression?
  @objc final public let mouth: DotFaceCore.FaceAttribute?
  @objc convenience public init(eyes: DotFaceCore.EyesExpression? = nil, mouth: DotFaceCore.FaceAttribute? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFLocalization) final public class Localization : ObjectiveC.NSObject {
  @objc public static var localizationDictionary: [Swift.String : Swift.String]?
  @objc public static var useLocalizationDictionary: Swift.Bool
  @objc public static var bundle: Foundation.Bundle
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFDetectedFace) final public class DetectedFace : ObjectiveC.NSObject, DotFaceCommons._FaceDetectionResult {
  @objc final public let image: DotCore.BgrRawImage
  @objc final public var confidence: Swift.Double {
    @objc get
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc final public func createTemplate() throws -> DotFaceCore.Template
  @objc final public func createFullFrontalImage() throws -> DotCore.BgrRawImage
  @objc final public func evaluateFaceQuality() throws -> DotFaceCore.FaceQuality
  @objc final public func evaluateFaceQuality(faceQualityQuery: DotFaceCore.FaceQualityQuery) throws -> DotFaceCore.FaceQuality
  @objc final public func evaluatePassiveLiveness() throws -> DotFaceCore.FaceAttribute
  @objc final public func evaluateFaceAspects() throws -> DotFaceCore.FaceAspects
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceImageFactory) final public class FaceImageFactory : ObjectiveC.NSObject {
  @objc public static func create(image: DotCore.BgrRawImage, minFaceSizeRatio: Swift.Double, maxFaceSizeRatio: Swift.Double) throws -> DotFaceCore.FaceImage
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceAspects) final public class FaceAspects : ObjectiveC.NSObject {
  @objc final public let eyeDistance: Swift.Int
  @objc public init(eyeDistance: Swift.Int)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class DotFaceLibrary : ObjectiveC.NSObject, DotCore.DotLibrary {
  @objc final public var id: DotCore.DotLibraryId {
    @objc get
  }
  @objc final public let configuration: DotFaceCore.DotFaceLibraryConfiguration
  @objc public init(configuration: DotFaceCore.DotFaceLibraryConfiguration)
  @objc final public func initialize(license: DotCore.DotSdkLicenseProxyProtocol) throws
  @objc final public func deinitialize() throws
  @objc final public func verifyIsActive() throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFSegmentImage) final public class SegmentImage : ObjectiveC.NSObject {
  @objc final public let image: DotCore.BgrRawImage
  @objc convenience public init(image: DotCore.BgrRawImage)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DOTFFaceSimpleCaptureViewController) @_Concurrency.MainActor(unsafe) final public class FaceSimpleCaptureViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) final public let configuration: DotFaceCore.FaceSimpleCaptureConfiguration
  @objc @_Concurrency.MainActor(unsafe) final public let style: DotFaceCore.FaceSimpleCaptureStyle
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: DotFaceCore.FaceSimpleCaptureViewControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public static func create(configuration: DotFaceCore.FaceSimpleCaptureConfiguration = .init(), style: DotFaceCore.FaceSimpleCaptureStyle = .init()) -> DotFaceCore.FaceSimpleCaptureViewController
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) final public func start()
  @objc @_Concurrency.MainActor(unsafe) final public func stopAsync(onStopped: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) final public func requestCapture()
  @objc deinit
}
extension DotFaceCore.FaceSimpleCaptureViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFLogger) final public class Logger : ObjectiveC.NSObject {
  @objc public static var logLevel: DotCore.LoggerLogLevel {
    @objc get
    @objc set
  }
  @objc public static func info(_ message: Swift.String? = nil, file: Swift.String = #file, function: Swift.String = #function)
  @objc public static func debug(_ message: Swift.String? = nil, file: Swift.String = #file, function: Swift.String = #function)
  @objc public static func warning(_ message: Swift.String? = nil, file: Swift.String = #file, function: Swift.String = #function)
  @objc public static func error(_ message: Swift.String? = nil, file: Swift.String = #file, function: Swift.String = #function)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFFaceSimpleCaptureStyle) final public class FaceSimpleCaptureStyle : ObjectiveC.NSObject {
  public struct Defaults {
    public static let backgroundColor: UIKit.UIColor
    public static let trackingCircleColor: UIKit.UIColor
  }
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let trackingCircleColor: UIKit.UIColor
  @objc override convenience dynamic public init()
  @objc public init(backgroundColor: UIKit.UIColor = Defaults.backgroundColor, trackingCircleColor: UIKit.UIColor = Defaults.trackingCircleColor)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFFaceAutoCaptureConfiguration) final public class FaceAutoCaptureConfiguration : ObjectiveC.NSObject, DotCamera._CameraConfiguration {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFQualityAttributeThresholds) final public class QualityAttributeThresholds : ObjectiveC.NSObject {
    @_inheritsConvenienceInitializers @objc(DOTFQualityAttributeThresholdsBuilder) final public class Builder : ObjectiveC.NSObject {
      @objc override dynamic public init()
      @discardableResult
      @objc final public func minConfidence(_ minConfidence: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func sizeInterval(_ sizeInterval: DotCore.IntervalDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func pitchAngleInterval(_ pitchAngleInterval: DotCore.IntervalFloat?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func yawAngleInterval(_ yawAngleInterval: DotCore.IntervalFloat?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func minSharpness(_ minSharpness: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func brightnessInterval(_ brightnessInterval: DotCore.IntervalDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func contrastInterval(_ contrastInterval: DotCore.IntervalDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func minUniqueIntensityLevels(_ minUniqueIntensityLevels: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func minBackgroundUniformity(_ minBackgroundUniformity: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func maxGlassesPresenceScore(_ maxGlassesPresenceScore: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func maxMaskPresenceScore(_ maxMaskPresenceScore: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func minMouthStatusScore(_ minMouthStatusScore: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func minEyesStatusScore(_ minEyesStatusScore: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func maxShadow(_ maxShadow: DotCore.WrappedDouble?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @discardableResult
      @objc final public func maxDevicePitchAngle(_ maxDevicePitchAngle: DotCore.WrappedFloat?) throws -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder
      @objc final public func build() -> DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds
      @objc deinit
    }
    @objc final public let minConfidence: DotCore.WrappedDouble?
    @objc final public let sizeInterval: DotCore.IntervalDouble?
    @objc final public let pitchAngleInterval: DotCore.IntervalFloat?
    @objc final public let yawAngleInterval: DotCore.IntervalFloat?
    @objc final public let minSharpness: DotCore.WrappedDouble?
    @objc final public let brightnessInterval: DotCore.IntervalDouble?
    @objc final public let contrastInterval: DotCore.IntervalDouble?
    @objc final public let minUniqueIntensityLevels: DotCore.WrappedDouble?
    @objc final public let minBackgroundUniformity: DotCore.WrappedDouble?
    @objc final public let maxGlassesPresenceScore: DotCore.WrappedDouble?
    @objc final public let maxMaskPresenceScore: DotCore.WrappedDouble?
    @objc final public let minMouthStatusScore: DotCore.WrappedDouble?
    @objc final public let minEyesStatusScore: DotCore.WrappedDouble?
    @objc final public let maxShadow: DotCore.WrappedDouble?
    @objc final public let maxDevicePitchAngle: DotCore.WrappedFloat?
    @objc override final public var description: Swift.String {
      @objc get
    }
    @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
    @objc override final public var hash: Swift.Int {
      @objc get
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFQualityAttributeThresholdPresets) final public class QualityAttributeThresholdPresets : ObjectiveC.NSObject {
    @objc public static var standard: DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder {
      @objc get
    }
    @objc public static var passiveLiveness: DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder {
      @objc get
    }
    @objc public static var icao: DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds.Builder {
      @objc get
    }
    @objc deinit
  }
  public struct Defaults {
    public static let faceSizeRatioInterval: DotCore.IntervalDouble
    public static let isDetectionLayerVisible: Swift.Bool
    public static let isTorchEnabled: Swift.Bool
    public static let cameraFacing: DotCamera.CameraFacing
    public static let cameraPreviewScaleType: DotCamera.CameraPreviewScaleType
  }
  @objc final public let faceSizeRatioInterval: DotCore.IntervalDouble
  @objc final public let qualityAttributeThresholds: DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds
  @objc final public let isDetectionLayerVisible: Swift.Bool
  @objc final public let isTorchEnabled: Swift.Bool
  @objc final public let cameraFacing: DotCamera.CameraFacing
  @objc final public let cameraPreviewScaleType: DotCamera.CameraPreviewScaleType
  @objc final public let sessionToken: Swift.String?
  @objc override convenience dynamic public init()
  @objc public init(sessionToken: Swift.String? = nil, qualityAttributeThresholds: DotFaceCore.FaceAutoCaptureConfiguration.QualityAttributeThresholds = QualityAttributeThresholdPresets.standard.build(), faceSizeRatioInterval: DotCore.IntervalDouble = Defaults.faceSizeRatioInterval, isDetectionLayerVisible: Swift.Bool = Defaults.isDetectionLayerVisible, isTorchEnabled: Swift.Bool = Defaults.isTorchEnabled, cameraFacing: DotCamera.CameraFacing = Defaults.cameraFacing, cameraPreviewScaleType: DotCamera.CameraPreviewScaleType = Defaults.cameraPreviewScaleType)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceSimpleCaptureResult) final public class FaceSimpleCaptureResult : ObjectiveC.NSObject {
  @objc final public let bgrRawImage: DotCore.BgrRawImage
  @objc final public let detectedFace: DotFaceCore.DetectedFace
  @objc final public let content: Foundation.Data
  @objc public init(bgrRawImage: DotCore.BgrRawImage, detectedFace: DotFaceCore.DetectedFace, content: Foundation.Data)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(DOTFSmileLivenessViewControllerDelegate) public protocol SmileLivenessViewControllerDelegate {
  @objc optional func smileLivenessViewControllerViewDidLoad(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewControllerViewDidLayoutSubviews(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewControllerViewWillAppear(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewControllerViewDidAppear(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewControllerViewWillDisappear(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewControllerViewDidDisappear(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewControllerViewWillTransition(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewControllerNoCameraPermission(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewControllerCriticalFacePresenceLost(_ viewController: DotFaceCore.SmileLivenessViewController)
  @objc optional func smileLivenessViewController(_ viewController: DotFaceCore.SmileLivenessViewController, processed detection: DotFaceCore.FaceAutoCaptureDetection)
  @objc func smileLivenessViewController(_ viewController: DotFaceCore.SmileLivenessViewController, finished result: DotFaceCore.SmileLivenessResult)
}
@_inheritsConvenienceInitializers @objc(DOTFMagnifEyeLivenessConfiguration) final public class MagnifEyeLivenessConfiguration : ObjectiveC.NSObject, DotCamera._CameraConfiguration {
  public struct Defaults {
    public static let faceSizeRatioInterval: DotCore.IntervalDouble
    public static let isDetectionLayerVisible: Swift.Bool
    public static let isTorchEnabled: Swift.Bool
    public static let cameraFacing: DotCamera.CameraFacing
    public static let cameraPreviewScaleType: DotCamera.CameraPreviewScaleType
  }
  @objc final public let faceSizeRatioInterval: DotCore.IntervalDouble
  @objc final public let isDetectionLayerVisible: Swift.Bool
  @objc final public let isTorchEnabled: Swift.Bool
  @objc final public let cameraFacing: DotCamera.CameraFacing
  @objc final public let cameraPreviewScaleType: DotCamera.CameraPreviewScaleType
  @objc final public let sessionToken: Swift.String?
  @objc override convenience dynamic public init()
  @objc public init(sessionToken: Swift.String? = nil, faceSizeRatioInterval: DotCore.IntervalDouble = Defaults.faceSizeRatioInterval, isDetectionLayerVisible: Swift.Bool = Defaults.isDetectionLayerVisible, isTorchEnabled: Swift.Bool = Defaults.isTorchEnabled, cameraFacing: DotCamera.CameraFacing = Defaults.cameraFacing, cameraPreviewScaleType: DotCamera.CameraPreviewScaleType = Defaults.cameraPreviewScaleType)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFTemplate) final public class Template : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFTemplateVersion) final public class Version : ObjectiveC.NSObject {
    @objc final public let major: Swift.Int
    @objc final public let minor: Swift.Int
    @objc public init(major: Swift.Int, minor: Swift.Int)
    @objc deinit
  }
  @objc final public let version: DotFaceCore.Template.Version
  @objc final public var bytes: Foundation.Data {
    @objc get
    @objc set
  }
  @objc convenience public init(bytes: Foundation.Data, version: DotFaceCore.Template.Version)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFFaceSimpleCaptureConfiguration) final public class FaceSimpleCaptureConfiguration : ObjectiveC.NSObject, DotCamera._CameraConfiguration {
  public struct Defaults {
    public static let faceSizeRatioInterval: DotCore.IntervalDouble
    public static let isTorchEnabled: Swift.Bool
    public static let cameraFacing: DotCamera.CameraFacing
    public static let cameraPreviewScaleType: DotCamera.CameraPreviewScaleType
  }
  @objc final public let faceSizeRatioInterval: DotCore.IntervalDouble
  @objc final public let isTorchEnabled: Swift.Bool
  @objc final public let cameraFacing: DotCamera.CameraFacing
  @objc final public let cameraPreviewScaleType: DotCamera.CameraPreviewScaleType
  @objc final public let sessionToken: Swift.String?
  @objc override convenience dynamic public init()
  @objc public init(sessionToken: Swift.String? = nil, faceSizeRatioInterval: DotCore.IntervalDouble = Defaults.faceSizeRatioInterval, isTorchEnabled: Swift.Bool = Defaults.isTorchEnabled, cameraFacing: DotCamera.CameraFacing = Defaults.cameraFacing, cameraPreviewScaleType: DotCamera.CameraPreviewScaleType = Defaults.cameraPreviewScaleType)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DOTFSmileLivenessViewController) @_Concurrency.MainActor(unsafe) final public class SmileLivenessViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) final public let configuration: DotFaceCore.SmileLivenessConfiguration
  @objc @_Concurrency.MainActor(unsafe) final public let style: DotFaceCore.SmileLivenessStyle
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: DotFaceCore.SmileLivenessViewControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public static func create(configuration: DotFaceCore.SmileLivenessConfiguration = .init(), style: DotFaceCore.SmileLivenessStyle = .init()) -> DotFaceCore.SmileLivenessViewController
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) final public func start()
  @objc @_Concurrency.MainActor(unsafe) final public func stopAsync(onStopped: @escaping () -> Swift.Void)
  @objc deinit
}
extension DotFaceCore.SmileLivenessViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFEyeGazeLivenessConfiguration) final public class EyeGazeLivenessConfiguration : ObjectiveC.NSObject {
  public enum Error : Foundation.LocalizedError {
    case wrongMinValidSegmentCount
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: DotFaceCore.EyeGazeLivenessConfiguration.Error, b: DotFaceCore.EyeGazeLivenessConfiguration.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc(DOTFEyeGazeLivenessTransitionType) public enum TransitionType : Swift.Int, Swift.CustomStringConvertible {
    case move
    case fade
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Defaults {
    public static let minFaceSizeRatio: Swift.Double
    public static let maxFaceSizeRatio: Swift.Double
    public static let proximityTolerance: Swift.Double
    public static let minValidSegmentCount: Swift.Int
    public static let transitionType: DotFaceCore.EyeGazeLivenessConfiguration.TransitionType
    public static let objectImageSize: CoreFoundation.CGSize
  }
  @objc final public let minFaceSizeRatio: Swift.Double
  @objc final public let maxFaceSizeRatio: Swift.Double
  @objc final public let proximityTolerance: Swift.Double
  @objc final public let segments: [DotFaceCore.Segment]
  @objc final public let minValidSegmentCount: Swift.Int
  @objc final public let transitionType: DotFaceCore.EyeGazeLivenessConfiguration.TransitionType
  @objc final public let objectImage: UIKit.UIImage
  @objc final public let objectImageSize: CoreFoundation.CGSize
  @objc override convenience dynamic public init()
  @objc convenience public init(transitionType: DotFaceCore.EyeGazeLivenessConfiguration.TransitionType = Defaults.transitionType, segments: [DotFaceCore.Segment] = [], minValidSegmentCount: Swift.Int = Defaults.minValidSegmentCount, minFaceSizeRatio: Swift.Double = Defaults.minFaceSizeRatio, maxFaceSizeRatio: Swift.Double = Defaults.maxFaceSizeRatio, objectImage: UIKit.UIImage? = nil, objectImageSize: CoreFoundation.CGSize = Defaults.objectImageSize, proximityTolerance: Swift.Double = Defaults.proximityTolerance) throws
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFGlasses) final public class Glasses : ObjectiveC.NSObject {
  @objc final public let score: Swift.Double
  @objc final public let preconditionsMet: Swift.Bool
  @objc public init(score: Swift.Double, preconditionsMet: Swift.Bool)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFExpressionQuery) final public class ExpressionQuery : ObjectiveC.NSObject {
  @objc final public let eyes: DotFaceCore.EyesExpressionQuery
  @objc final public let mouth: Swift.Bool
  @objc override convenience dynamic public init()
  @objc convenience public init(eyes: DotFaceCore.EyesExpressionQuery = EyesExpressionQuery(), mouth: Swift.Bool = false)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFFaceMatcher) final public class FaceMatcher : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceMatcherResult) final public class Result : ObjectiveC.NSObject {
    @objc final public let score: Swift.Double
    @objc public init(score: Swift.Double)
    @objc deinit
  }
  public enum Error : Foundation.LocalizedError {
    case noFaceDetectedInReferenceImage
    case noFaceDetectedInProbeImage
    public static func == (a: DotFaceCore.FaceMatcher.Error, b: DotFaceCore.FaceMatcher.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc final public func match(referenceFaceImage: DotFaceCore.FaceImage, probeFaceImage: DotFaceCore.FaceImage) throws -> DotFaceCore.FaceMatcher.Result
  @objc final public func match(referenceTemplate: DotFaceCore.Template, probeFaceImage: DotFaceCore.FaceImage) throws -> DotFaceCore.FaceMatcher.Result
  @objc final public func match(referenceTemplateBytes: Foundation.Data, probeFaceImage: DotFaceCore.FaceImage) throws -> DotFaceCore.FaceMatcher.Result
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFSmileLivenessConfiguration) final public class SmileLivenessConfiguration : ObjectiveC.NSObject, DotCamera._CameraConfiguration {
  public struct Defaults {
    public static let faceSizeRatioInterval: DotCore.IntervalDouble
    public static let isDetectionLayerVisible: Swift.Bool
    public static let isTorchEnabled: Swift.Bool
    public static let cameraFacing: DotCamera.CameraFacing
    public static let cameraPreviewScaleType: DotCamera.CameraPreviewScaleType
  }
  @objc final public let faceSizeRatioInterval: DotCore.IntervalDouble
  @objc final public let isDetectionLayerVisible: Swift.Bool
  @objc final public let isTorchEnabled: Swift.Bool
  @objc final public let cameraFacing: DotCamera.CameraFacing
  @objc final public let cameraPreviewScaleType: DotCamera.CameraPreviewScaleType
  @objc final public let sessionToken: Swift.String?
  @objc override convenience dynamic public init()
  @objc public init(sessionToken: Swift.String? = nil, faceSizeRatioInterval: DotCore.IntervalDouble = Defaults.faceSizeRatioInterval, isDetectionLayerVisible: Swift.Bool = Defaults.isDetectionLayerVisible, isTorchEnabled: Swift.Bool = Defaults.isTorchEnabled, cameraFacing: DotCamera.CameraFacing = Defaults.cameraFacing, cameraPreviewScaleType: DotCamera.CameraPreviewScaleType = Defaults.cameraPreviewScaleType)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(DOTFSegmentsGenerator) public protocol SegmentsGenerator {
  @objc func generate(segmentCount: Swift.Int, segmentDurationMillis: Swift.Int) -> [DotFaceCore.Segment]
}
@_inheritsConvenienceInitializers @objc(DOTFRandomSegmentsGenerator) final public class RandomSegmentsGenerator : ObjectiveC.NSObject, DotFaceCore.SegmentsGenerator {
  @objc final public func generate(segmentCount: Swift.Int, segmentDurationMillis: Swift.Int) -> [DotFaceCore.Segment]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFEyeGazeLivenessViewController) @_Concurrency.MainActor(unsafe) final public class EyeGazeLivenessViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) final public var configuration: DotFaceCore.EyeGazeLivenessConfiguration {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public var style: DotFaceCore.EyeGazeLivenessStyle {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: DotFaceCore.EyeGazeLivenessViewControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public static func create(configuration: DotFaceCore.EyeGazeLivenessConfiguration, style: DotFaceCore.EyeGazeLivenessStyle = .init()) -> DotFaceCore.EyeGazeLivenessViewController
  @objc @_Concurrency.MainActor(unsafe) final public func start()
  @objc @_Concurrency.MainActor(unsafe) final public func stopAsync()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension DotFaceCore.EyeGazeLivenessViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@_inheritsConvenienceInitializers @objc(DOTFMagnifEyeLivenessStyle) final public class MagnifEyeLivenessStyle : ObjectiveC.NSObject {
  public struct Defaults {
    public static let backgroundColor: UIKit.UIColor
    public static let instructionFont: UIKit.UIFont
    public static let instructionTextColor: UIKit.UIColor
    public static let instructionCandidateSelectionTextColor: UIKit.UIColor
    public static let instructionBackgroundColor: UIKit.UIColor
    public static let instructionCandidateSelectionBackgroundColor: UIKit.UIColor
    public static let placeholderColor: UIKit.UIColor
    public static let placeholderCandidateSelectionColor: UIKit.UIColor
    public static let detectionLayerColor: UIKit.UIColor
    public static let overlayColor: UIKit.UIColor
  }
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let instructionFont: UIKit.UIFont
  @objc final public let instructionTextColor: UIKit.UIColor
  @objc final public let instructionCandidateSelectionTextColor: UIKit.UIColor
  @objc final public let instructionBackgroundColor: UIKit.UIColor
  @objc final public let instructionCandidateSelectionBackgroundColor: UIKit.UIColor
  @objc final public let placeholderColor: UIKit.UIColor
  @objc final public let placeholderCandidateSelectionColor: UIKit.UIColor
  @objc final public let detectionLayerColor: UIKit.UIColor
  @objc final public let overlayColor: UIKit.UIColor
  @objc public init(backgroundColor: UIKit.UIColor = Defaults.backgroundColor, instructionFont: UIKit.UIFont = Defaults.instructionFont, instructionTextColor: UIKit.UIColor = Defaults.instructionTextColor, instructionCandidateSelectionTextColor: UIKit.UIColor = Defaults.instructionCandidateSelectionTextColor, instructionBackgroundColor: UIKit.UIColor = Defaults.instructionBackgroundColor, instructionCandidateSelectionBackgroundColor: UIKit.UIColor = Defaults.instructionCandidateSelectionBackgroundColor, placeholderColor: UIKit.UIColor = Defaults.placeholderColor, placeholderCandidateSelectionColor: UIKit.UIColor = Defaults.placeholderCandidateSelectionColor, detectionLayerColor: UIKit.UIColor = Defaults.detectionLayerColor, overlayColor: UIKit.UIColor = Defaults.overlayColor)
  @objc override dynamic public init()
  @objc deinit
}
@objc(DOTFEyeGazeLivenessViewControllerDelegate) public protocol EyeGazeLivenessViewControllerDelegate {
  @objc optional func eyeGazeLivenessViewControllerViewDidLoad(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc optional func eyeGazeLivenessViewControllerViewDidLayoutSubviews(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc optional func eyeGazeLivenessViewControllerViewWillAppear(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc optional func eyeGazeLivenessViewControllerViewDidAppear(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc optional func eyeGazeLivenessViewControllerViewWillDisappear(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc optional func eyeGazeLivenessViewControllerViewDidDisappear(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc optional func eyeGazeLivenessViewControllerViewWillTransition(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc optional func eyeGazeLivenessViewControllerNoCameraPermission(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc optional func eyeGazeLivenessViewControllerStopped(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc func eyeGazeLivenessViewController(_ viewController: DotFaceCore.EyeGazeLivenessViewController, stateChanged state: DotFaceCore.EyeGazeLivenessState)
  @objc func eyeGazeLivenessViewController(_ viewController: DotFaceCore.EyeGazeLivenessViewController, finished score: Swift.Float, with segmentImages: [DotFaceCore.SegmentImage])
  @objc func eyeGazeLivenessViewControllerNoMoreSegments(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc func eyeGazeLivenessViewControllerEyesNotDetected(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
  @objc func eyeGazeLivenessViewControllerFaceTrackingFailed(_ viewController: DotFaceCore.EyeGazeLivenessViewController)
}
@_inheritsConvenienceInitializers @objc(DOTFEyeGazeLivenessStyle) final public class EyeGazeLivenessStyle : ObjectiveC.NSObject {
  public struct Defaults {
    public static let backgroundColor: UIKit.UIColor
    public static let objectColor: UIKit.UIColor
    public static let hintFont: UIKit.UIFont
    public static let hintTextColor: UIKit.UIColor
    public static let hintBackgroundColor: UIKit.UIColor
  }
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let objectColor: UIKit.UIColor
  @objc final public let hintFont: UIKit.UIFont
  @objc final public let hintTextColor: UIKit.UIColor
  @objc final public let hintBackgroundColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc public init(backgroundColor: UIKit.UIColor = Defaults.backgroundColor, objectColor: UIKit.UIColor = Defaults.objectColor, hintFont: UIKit.UIFont = Defaults.hintFont, hintTextColor: UIKit.UIColor = Defaults.hintTextColor, hintBackgroundColor: UIKit.UIColor = Defaults.hintBackgroundColor)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceAttribute) final public class FaceAttribute : ObjectiveC.NSObject {
  @objc final public let score: Swift.Double
  @objc final public let preconditionsMet: Swift.Bool
  @objc public init(score: Swift.Double, preconditionsMet: Swift.Bool)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol DotFaceModule {
  @objc var versionName: Swift.String { get }
  @objc var moduleId: DotFaceCore.DotFaceModuleId { get }
  @objc var dependencies: [DotFaceCore.DotFaceModuleCategoryWrapper] { get }
  @objc var modelsUrl: Foundation.URL { get }
}
@objc public enum DotFaceModuleId : Swift.Int, Swift.CustomStringConvertible {
  case detectionFast
  case detectionBalanced
  case verification
  case eyeGazeLiveness
  case passiveLiveness
  case backgroundUniformity
  case expressionNeutral
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum DotFaceModuleCategory : Swift.Int, Swift.CustomStringConvertible, Swift.CaseIterable {
  case detection
  case verification
  case eyeGazeLiveness
  case passiveLiveness
  case backgroundUniformity
  case expressionNeutral
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [DotFaceCore.DotFaceModuleCategory]
  public typealias RawValue = Swift.Int
  public static var allCases: [DotFaceCore.DotFaceModuleCategory] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class DotFaceModuleCategoryWrapper : ObjectiveC.NSObject {
  @objc final public let moduleCategory: DotFaceCore.DotFaceModuleCategory
  @objc public init(moduleCategory: DotFaceCore.DotFaceModuleCategory)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(DOTFFaceFeature) public enum FaceFeature : Swift.Int, Swift.CustomStringConvertible {
  case rightEyeOuterCorner
  case rightEyeCenter
  case rightEyeInnerCorner
  case leftEyeOuterCorner
  case leftEyeCenter
  case leftEyeInnerCorner
  case noseRoot
  case noseRightBottom
  case noseTip
  case noseLeftBottom
  case noseBottom
  case mouthRightCorner
  case mouthCenter
  case mouthLeftCorner
  case mouthUpperEdge
  case mouthLowerEdge
  case rightEyebrowOuterEdge
  case rightEyebrowInnerEdge
  case leftEyebrowOuterEdge
  case leftEyebrowInnerEdge
  case faceRightEdge
  case faceChinTip
  case faceLeftEdge
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceFeatureWrapper) final public class FaceFeatureWrapper : ObjectiveC.NSObject {
  @objc public init(feature: DotFaceCore.FaceFeature)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceFeaturePoint) final public class FaceFeaturePoint : ObjectiveC.NSObject {
  @objc final public let feature: DotFaceCore.FaceFeature
  @objc final public let point: CoreFoundation.CGPoint
  @objc final public let score: Swift.Float
  @objc public init(feature: DotFaceCore.FaceFeature, point: CoreFoundation.CGPoint, score: Swift.Float)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceAutoCaptureResult) final public class FaceAutoCaptureResult : ObjectiveC.NSObject, DotFaceCommons._FaceAutoCaptureResultMarker {
  @objc final public let bgrRawImage: DotCore.BgrRawImage
  @objc final public let detectedFace: DotFaceCore.DetectedFace?
  @objc final public let content: Foundation.Data
  @objc public init(bgrRawImage: DotCore.BgrRawImage, detectedFace: DotFaceCore.DetectedFace?, content: Foundation.Data)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceImageQuality) final public class FaceImageQuality : ObjectiveC.NSObject {
  @objc final public let sharpness: DotFaceCore.FaceAttribute?
  @objc final public let brightness: DotFaceCore.FaceAttribute?
  @objc final public let contrast: DotFaceCore.FaceAttribute?
  @objc final public let uniqueIntensityLevels: DotFaceCore.FaceAttribute?
  @objc final public let shadow: DotFaceCore.FaceAttribute?
  @objc final public let specularity: DotFaceCore.FaceAttribute?
  @objc final public let backgroundUniformity: DotFaceCore.FaceAttribute?
  @objc public init(sharpness: DotFaceCore.FaceAttribute? = nil, brightness: DotFaceCore.FaceAttribute? = nil, contrast: DotFaceCore.FaceAttribute? = nil, uniqueIntensityLevels: DotFaceCore.FaceAttribute? = nil, shadow: DotFaceCore.FaceAttribute? = nil, specularity: DotFaceCore.FaceAttribute? = nil, backgroundUniformity: DotFaceCore.FaceAttribute? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFFaceQualityQuery) final public class FaceQualityQuery : ObjectiveC.NSObject {
  @objc final public let imageQuality: DotFaceCore.FaceImageQualityQuery
  @objc final public let headPose: DotFaceCore.HeadPoseQuery
  @objc final public let wearables: DotFaceCore.WearablesQuery
  @objc final public let expression: DotFaceCore.ExpressionQuery
  @objc override convenience dynamic public init()
  @objc public init(imageQuality: DotFaceCore.FaceImageQualityQuery = FaceImageQualityQuery(), headPose: DotFaceCore.HeadPoseQuery = HeadPoseQuery(), wearables: DotFaceCore.WearablesQuery = WearablesQuery(), expression: DotFaceCore.ExpressionQuery = ExpressionQuery())
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DOTFFaceAutoCaptureViewController) @_Concurrency.MainActor(unsafe) final public class FaceAutoCaptureViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) final public let configuration: DotFaceCore.FaceAutoCaptureConfiguration
  @objc @_Concurrency.MainActor(unsafe) final public let style: DotFaceCore.FaceAutoCaptureStyle
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: DotFaceCore.FaceAutoCaptureViewControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public static func create(configuration: DotFaceCore.FaceAutoCaptureConfiguration = .init(), style: DotFaceCore.FaceAutoCaptureStyle = .init()) -> DotFaceCore.FaceAutoCaptureViewController
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) final public func start()
  @objc @_Concurrency.MainActor(unsafe) final public func stopAsync(onStopped: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) final public func requestCapture()
  @objc deinit
}
extension DotFaceCore.FaceAutoCaptureViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceAutoCaptureDetection) final public class FaceAutoCaptureDetection : ObjectiveC.NSObject {
  @objc final public let bgrRawImage: DotCore.BgrRawImage
  @objc final public let detectedFace: DotFaceCore.DetectedFace?
  @objc final public let position: DotFaceCommons.DetectionPosition?
  @objc final public let deviceTiltAngles: DotCapture.TiltAngles?
  @objc final public let validatorIdentifiers: [Swift.String]
  @objc public init(bgrRawImage: DotCore.BgrRawImage, detectedFace: DotFaceCore.DetectedFace?, position: DotFaceCommons.DetectionPosition?, deviceTiltAngles: DotCapture.TiltAngles?, validatorIdentifiers: [Swift.String])
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFFaceAutoCaptureStyle) final public class FaceAutoCaptureStyle : ObjectiveC.NSObject {
  public struct Defaults {
    public static let backgroundColor: UIKit.UIColor
    public static let backgroundOverlayColor: UIKit.UIColor
    public static let circleOutlineColor: UIKit.UIColor
    public static let trackingCircleColor: UIKit.UIColor
    public static let circleOutlineColorStayStill: UIKit.UIColor
    public static let hintFont: UIKit.UIFont
    public static let hintTextColor: UIKit.UIColor
    public static let hintBackgroundColor: UIKit.UIColor
  }
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let backgroundOverlayColor: UIKit.UIColor
  @objc final public let circleOutlineColor: UIKit.UIColor
  @objc final public let trackingCircleColor: UIKit.UIColor
  @objc final public let circleOutlineColorStayStill: UIKit.UIColor
  @objc final public let hintFont: UIKit.UIFont
  @objc final public let hintTextColor: UIKit.UIColor
  @objc final public let hintBackgroundColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc public init(backgroundColor: UIKit.UIColor = Defaults.backgroundColor, backgroundOverlayColor: UIKit.UIColor = Defaults.backgroundOverlayColor, circleOutlineColor: UIKit.UIColor = Defaults.circleOutlineColor, trackingCircleColor: UIKit.UIColor = Defaults.trackingCircleColor, circleOutlineColorStayStill: UIKit.UIColor = Defaults.circleOutlineColorStayStill, hintFont: UIKit.UIFont = Defaults.hintFont, hintTextColor: UIKit.UIColor = Defaults.hintTextColor, hintBackgroundColor: UIKit.UIColor = Defaults.hintBackgroundColor)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFFaceDetector) final public class FaceDetector : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc final public func detect(faceImage: DotFaceCore.FaceImage, maximumFaces: Swift.Int) throws -> [DotFaceCore.DetectedFace]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFSegment) final public class Segment : ObjectiveC.NSObject {
  @objc(DOTFSegmentCorner) public enum Corner : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
    case topLeft
    case topRight
    case bottomLeft
    case bottomRight
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [DotFaceCore.Segment.Corner]
    public typealias RawValue = Swift.Int
    public static var allCases: [DotFaceCore.Segment.Corner] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let targetCorner: DotFaceCore.Segment.Corner
  @objc final public let durationMillis: Swift.Int
  @objc public init(targetCorner: DotFaceCore.Segment.Corner, durationMillis: Swift.Int)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFHeadPose) final public class HeadPose : ObjectiveC.NSObject {
  @objc final public let roll: DotFaceCore.HeadPoseAttribute?
  @objc final public let yaw: DotFaceCore.HeadPoseAttribute?
  @objc final public let pitch: DotFaceCore.HeadPoseAttribute?
  @objc public init(roll: DotFaceCore.HeadPoseAttribute? = nil, yaw: DotFaceCore.HeadPoseAttribute? = nil, pitch: DotFaceCore.HeadPoseAttribute? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFSmileLivenessResult) final public class SmileLivenessResult : ObjectiveC.NSObject {
  @objc final public let bgrRawImage: DotCore.BgrRawImage
  @objc final public let detectedFace: DotFaceCore.DetectedFace
  @available(*, deprecated, message: "Temporary property for liveness evaluation on DIS. It will be replaced by binary content.")
  @objc final public let smileExpressionBgrRawImage: DotCore.BgrRawImage
  @objc final public let content: Foundation.Data
  @objc public init(bgrRawImage: DotCore.BgrRawImage, detectedFace: DotFaceCore.DetectedFace, smileExpressionBgrRawImage: DotCore.BgrRawImage, content: Foundation.Data)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFTemplateMatcher) final public class TemplateMatcher : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFTemplateMatcherResult) final public class Result : ObjectiveC.NSObject {
    @objc final public let score: Swift.Double
    @objc public init(score: Swift.Double)
    @objc deinit
  }
  public enum Error : Foundation.LocalizedError {
    case failedToMatch
    public static func == (a: DotFaceCore.TemplateMatcher.Error, b: DotFaceCore.TemplateMatcher.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc final public func match(referenceTemplate: DotFaceCore.Template, probeTemplate: DotFaceCore.Template) throws -> DotFaceCore.TemplateMatcher.Result
  @objc final public func match(referenceTemplateBytes: Foundation.Data, probeTemplateBytes: Foundation.Data) throws -> DotFaceCore.TemplateMatcher.Result
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DOTFHeadPoseQuery) final public class HeadPoseQuery : ObjectiveC.NSObject {
  @objc final public let roll: Swift.Bool
  @objc final public let yaw: Swift.Bool
  @objc final public let pitch: Swift.Bool
  @objc override convenience dynamic public init()
  @objc public init(roll: Swift.Bool = false, yaw: Swift.Bool = false, pitch: Swift.Bool = false)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFFaceQuality) final public class FaceQuality : ObjectiveC.NSObject {
  @objc final public let imageQuality: DotFaceCore.FaceImageQuality?
  @objc final public let headPose: DotFaceCore.HeadPose?
  @objc final public let wearables: DotFaceCore.Wearables?
  @objc final public let expression: DotFaceCore.Expression?
  @objc public init(imageQuality: DotFaceCore.FaceImageQuality? = nil, headPose: DotFaceCore.HeadPose? = nil, wearables: DotFaceCore.Wearables? = nil, expression: DotFaceCore.Expression? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFHeadPoseAttribute) final public class HeadPoseAttribute : ObjectiveC.NSObject {
  @objc final public let angle: Swift.Float
  @objc final public let preconditionsMet: Swift.Bool
  @objc public init(angle: Swift.Float, preconditionsMet: Swift.Bool)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFMagnifEyeLivenessResult) final public class MagnifEyeLivenessResult : ObjectiveC.NSObject, DotFaceCommons._MagnifEyeLivenessResultMarker {
  @objc final public let bgrRawImage: DotCore.BgrRawImage
  @objc final public let detectedFace: DotFaceCore.DetectedFace
  @objc final public let content: Foundation.Data
  @objc public init(bgrRawImage: DotCore.BgrRawImage, detectedFace: DotFaceCore.DetectedFace, content: Foundation.Data)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class DotFaceLibraryConfiguration : ObjectiveC.NSObject {
  public enum Error : Foundation.LocalizedError {
    case invalidFaceDetectionConfidenceThreshold
    public var errorDescription: Swift.String? {
      get
    }
    public static func == (a: DotFaceCore.DotFaceLibraryConfiguration.Error, b: DotFaceCore.DotFaceLibraryConfiguration.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc final public let modules: [DotFaceCore.DotFaceModule]
  @objc final public let faceDetectionConfidenceThreshold: Swift.Double
  @objc convenience public init(modules: [DotFaceCore.DotFaceModule])
  @objc public init(modules: [DotFaceCore.DotFaceModule], faceDetectionConfidenceThreshold: Swift.Double) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(DOTFMagnifEyeLivenessViewController) @_Concurrency.MainActor(unsafe) final public class MagnifEyeLivenessViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) final public let configuration: DotFaceCore.MagnifEyeLivenessConfiguration
  @objc @_Concurrency.MainActor(unsafe) final public let style: DotFaceCore.MagnifEyeLivenessStyle
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: DotFaceCore.MagnifEyeLivenessViewControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public static func create(configuration: DotFaceCore.MagnifEyeLivenessConfiguration = .init(), style: DotFaceCore.MagnifEyeLivenessStyle = .init()) -> DotFaceCore.MagnifEyeLivenessViewController
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) final public func start()
  @objc @_Concurrency.MainActor(unsafe) final public func stopAsync(onStopped: @escaping () -> Swift.Void)
  @objc deinit
}
extension DotFaceCore.MagnifEyeLivenessViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFWearables) final public class Wearables : ObjectiveC.NSObject {
  @objc final public let glasses: DotFaceCore.Glasses?
  @objc final public let mask: DotFaceCore.FaceAttribute?
  @objc public init(glasses: DotFaceCore.Glasses? = nil, mask: DotFaceCore.FaceAttribute? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(DOTFEyesExpression) final public class EyesExpression : ObjectiveC.NSObject {
  @objc final public let rightEye: DotFaceCore.FaceAttribute?
  @objc final public let leftEye: DotFaceCore.FaceAttribute?
  @objc public init(rightEye: DotFaceCore.FaceAttribute? = nil, leftEye: DotFaceCore.FaceAttribute? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(DOTFFaceAutoCaptureViewControllerDelegate) public protocol FaceAutoCaptureViewControllerDelegate {
  @objc optional func faceAutoCaptureViewControllerViewDidLoad(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc optional func faceAutoCaptureViewControllerViewDidLayoutSubviews(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc optional func faceAutoCaptureViewControllerViewWillAppear(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc optional func faceAutoCaptureViewControllerViewDidAppear(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc optional func faceAutoCaptureViewControllerViewWillDisappear(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc optional func faceAutoCaptureViewControllerViewDidDisappear(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc optional func faceAutoCaptureViewControllerViewWillTransition(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc optional func faceAutoCaptureViewControllerNoCameraPermission(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc optional func faceAutoCaptureViewController(_ viewController: DotFaceCore.FaceAutoCaptureViewController, processed detection: DotFaceCore.FaceAutoCaptureDetection)
  @objc optional func faceAutoCaptureViewControllerCandidateSelectionStarted(_ viewController: DotFaceCore.FaceAutoCaptureViewController)
  @objc func faceAutoCaptureViewController(_ viewController: DotFaceCore.FaceAutoCaptureViewController, captured result: DotFaceCore.FaceAutoCaptureResult)
}
@_inheritsConvenienceInitializers @objc(DOTFWearablesQuery) final public class WearablesQuery : ObjectiveC.NSObject {
  @objc final public let glasses: Swift.Bool
  @objc final public let mask: Swift.Bool
  @objc override convenience dynamic public init()
  @objc public init(glasses: Swift.Bool = false, mask: Swift.Bool = false)
  @objc deinit
}
@objc(DOTFFaceSimpleCaptureViewControllerDelegate) public protocol FaceSimpleCaptureViewControllerDelegate {
  @objc optional func faceSimpleCaptureViewControllerViewDidLoad(_ viewController: DotFaceCore.FaceSimpleCaptureViewController)
  @objc optional func faceSimpleCaptureViewControllerViewDidLayoutSubviews(_ viewController: DotFaceCore.FaceSimpleCaptureViewController)
  @objc optional func faceSimpleCaptureViewControllerViewWillAppear(_ viewController: DotFaceCore.FaceSimpleCaptureViewController)
  @objc optional func faceSimpleCaptureViewControllerViewDidAppear(_ viewController: DotFaceCore.FaceSimpleCaptureViewController)
  @objc optional func faceSimpleCaptureViewControllerViewWillDisappear(_ viewController: DotFaceCore.FaceSimpleCaptureViewController)
  @objc optional func faceSimpleCaptureViewControllerViewDidDisappear(_ viewController: DotFaceCore.FaceSimpleCaptureViewController)
  @objc optional func faceSimpleCaptureViewControllerViewWillTransition(_ viewController: DotFaceCore.FaceSimpleCaptureViewController)
  @objc optional func faceSimpleCaptureViewControllerNoCameraPermission(_ viewController: DotFaceCore.FaceSimpleCaptureViewController)
  @objc func faceSimpleCaptureViewController(_ viewController: DotFaceCore.FaceSimpleCaptureViewController, captured result: DotFaceCore.FaceSimpleCaptureResult)
}
extension DotFaceCore.EyeGazeLivenessState : Swift.Equatable {}
extension DotFaceCore.EyeGazeLivenessState : Swift.Hashable {}
extension DotFaceCore.EyeGazeLivenessState : Swift.RawRepresentable {}
extension DotFaceCore.ValueRange.Error : Swift.Equatable {}
extension DotFaceCore.ValueRange.Error : Swift.Hashable {}
extension DotFaceCore.ValueRange.Status : Swift.Equatable {}
extension DotFaceCore.ValueRange.Status : Swift.Hashable {}
extension DotFaceCore.ValueRange.Status : Swift.RawRepresentable {}
extension DotFaceCore.EyeGazeLivenessConfiguration.Error : Swift.Equatable {}
extension DotFaceCore.EyeGazeLivenessConfiguration.Error : Swift.Hashable {}
extension DotFaceCore.EyeGazeLivenessConfiguration.TransitionType : Swift.Equatable {}
extension DotFaceCore.EyeGazeLivenessConfiguration.TransitionType : Swift.Hashable {}
extension DotFaceCore.EyeGazeLivenessConfiguration.TransitionType : Swift.RawRepresentable {}
extension DotFaceCore.FaceMatcher.Error : Swift.Equatable {}
extension DotFaceCore.FaceMatcher.Error : Swift.Hashable {}
extension DotFaceCore.DotFaceModuleId : Swift.Equatable {}
extension DotFaceCore.DotFaceModuleId : Swift.Hashable {}
extension DotFaceCore.DotFaceModuleId : Swift.RawRepresentable {}
extension DotFaceCore.DotFaceModuleCategory : Swift.Equatable {}
extension DotFaceCore.DotFaceModuleCategory : Swift.Hashable {}
extension DotFaceCore.DotFaceModuleCategory : Swift.RawRepresentable {}
extension DotFaceCore.FaceFeature : Swift.Equatable {}
extension DotFaceCore.FaceFeature : Swift.Hashable {}
extension DotFaceCore.FaceFeature : Swift.RawRepresentable {}
extension DotFaceCore.Segment.Corner : Swift.Equatable {}
extension DotFaceCore.Segment.Corner : Swift.Hashable {}
extension DotFaceCore.Segment.Corner : Swift.RawRepresentable {}
extension DotFaceCore.TemplateMatcher.Error : Swift.Equatable {}
extension DotFaceCore.TemplateMatcher.Error : Swift.Hashable {}
extension DotFaceCore.DotFaceLibraryConfiguration.Error : Swift.Equatable {}
extension DotFaceCore.DotFaceLibraryConfiguration.Error : Swift.Hashable {}
